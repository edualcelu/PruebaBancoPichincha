buildscript {
    repositories {
        maven {
            url "Credenciales"
            name "BancoPichinchaEC"
            credentials {
                username = "Credenciales"
                password = "Credenciales"
            }
        }
    }
    dependencies {
        classpath "org.openapitools:openapi-generator-gradle-plugin:7.4.0"
    }
}


plugins {
    id "org.springframework.boot" version "3.2.5"
    id "io.spring.dependency-management" version "1.1.4"
    id "jacoco"
} 

springBoot {
    mainClass = "com.pichincha.bs.OptimusMainApplication"
}


apply plugin: "java"
apply plugin: "org.openapi.generator"

group = "com.pichincha.bs"
version = "1.0.1"
sourceCompatibility = "17"

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

ext["log4j2.version"] = "2.17.1"
ext["jackson.version"] ="2.16.0"

repositories {
    mavenCentral()
    maven {
        url "Credenciales"
		name "BancoPichinchaEC"
		credentials {
			username = "Credenciales"
			password = "Credenciales"
		}
    }    
} 

ext {
    mapstructVersion = "1.4.2.Final"
    lombokVersion = "1.18.26"
}


dependencies {
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    //dependency Base
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: '3.1.3'

    //dependencies for default
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation group: 'org.springdoc', name: 'springdoc-openapi-webflux-ui', version: '1.7.0'

    // dependency from optimus
    compileOnly group: "org.projectlombok" , name: "lombok" , version: ""

    //dependencias para redis
    

    //dependencias para circuit breaker
    

    //dependencias feing o web client
    

    //dependencias graphql
    
	

	//libs prueba
    implementation group: "org.mapstruct", name: "mapstruct", version: "1.5.3.Final"
    annotationProcessor group: "org.mapstruct", name: "mapstruct-processor", version: "1.5.3.Final"
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'

    implementation group: "io.r2dbc", name: "r2dbc-h2", version: "1.0.0.RELEASE"
    implementation group: "org.springframework.boot", name: "spring-boot-starter-data-r2dbc", version: "2.7.10"
    implementation 'io.r2dbc:r2dbc-mssql'


    //seguridad
    implementation 'org.xerial.snappy:snappy-java:1.1.10.5'
    implementation 'org.yaml:snakeyaml:2.0'
	
    //test
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "io.projectreactor:reactor-test"
    testImplementation "org.junit.jupiter:junit-jupiter-engine"
    testImplementation "org.xmlunit:xmlunit-core:2.10.0"
}
configurations.all {
    exclude group:"org.springframework.boot", module: "spring-boot-starter-json"
    exclude group:"org.springframework.boot", module: "spring-boot-starter-aop"
    exclude group:"org.bouncycastle", module:"bcpkix-jdk15on"
    exclude group:"org.bouncycastle", module:"bcprov-jdk15on"
    exclude group:"org.bouncycastle", module:"bcpkix-jdk18on"
    exclude group:"org.bouncycastle", module:"bcprov-jdk18on"
    exclude group:"commons-fileupload", module:"commons-fileupload"
    exclude group:"org.apache.tomcat.embed", module:"tomcat-embed-websocket"
    exclude group:"com.google.guava", module:"guava"
    exclude group:"com.graphql-java-kickstart", module:"graphql-kickstart-spring-webflux"
    exclude group:"org.javassist", module:"javassist"
    exclude group:"org.jetbrains.kotlinx", module:"kotlinx-coroutines-jdk8"
}

task buildSpringServer(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    generatorName = "spring"
    templateDir ="$rootDir/src/main/resources/openapi-templates"
    inputSpec = "$rootDir/src/main/resources/openapi.yaml".toString()
    outputDir = "$buildDir/generated".toString()
    apiPackage = "com.pichincha.services.server"
    modelPackage = "com.pichincha.services.server.models"
    library = "spring-boot"
    configOptions = [
      skipDefaultInterface                    : "true",
      useSpringBoot3                          : "true",
      useJakartaEe                            : "true",
      serializableModel                       : "true",
      dateLibrary                             : "java8",
      openApiNullable                         : "false",
      reactive                                : "true",
      apiFirst                                : "false",
      delegatePattern                         : "false",
      configPackage                           : "com.pichincha.services.config",
      sourceFolder                            : "src/main/java",
      basePackage                             : "com.pichincha",
      disallowAdditionalPropertiesIfNotPresent: "true",
      interfaceOnly                           : "true"
]
}


 
compileJava.dependsOn buildSpringServer 

task optimusCreateUnitTest(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = "com.pichincha.test.core.ProcessMain"
}

compileJava {
    options.compilerArgs += [
            "-Amapstruct.suppressGeneratorTimestamp=true",
            "-Amapstruct.suppressGeneratorVersionInfoComment=true",
            "-Amapstruct.verbose=true",
            "-Amapstruct.defaultComponentModel=spring"
    ]
}
 
sourceSets.main.java.srcDirs = ["$buildDir/generated/src/main/java", "src/main/java"]

springBoot{
    buildInfo() 
}

test {

    useJUnitPlatform()

    finalizedBy jacocoTestReport

}

jacocoTestReport {
    dependsOn test
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "com/pichincha/services/*OpenAPI2SpringBoot*",
                    "com/pichincha/services/*RFC3339DateFormat*",
                    "com/pichincha/services/data/*",
                    "com/pichincha/services/server/*",
                    "com/pichincha/services/configuration/*",
                    "com/pichincha/services/config/*",
                    "com/pichincha/services/client/*",
                    "com/pichincha/services/repository/*",
                    "com/pichincha/services/server/models/*",
                    "com/pichincha/services/model/*",
                    "com/pichincha/services/mapper/*"
            ])
        }))
    }
    reports {
        xml.required = true
        xml.destination file("$buildDir/jacoco/test.xml")
        html.destination file("$buildDir/jacoco/index.html")
        html.required = true
        csv.required = true
    }
}